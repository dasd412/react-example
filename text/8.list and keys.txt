[List 와 keys]
key는 각각 고유하다. key는 List 내 아이템들을 구분하기 위한 고유한 문자열이다.

[여러 개의 컴포넌트 렌더링 하기]

```
const numbers=[1,2,3,4,5];

const listItems=numbers.map((number)=>{
    <li>{number}</li>
});

ReactDOM.render(
    <ul>{listItems}</ul>,
    document.getElementById('root')
);
```

위 코드를 함수형 컴포넌트로 만들면 다음과 같다. 단 아래 코드는 key가 없기 때문에 에러가 난다.

```
function NumberList(props){
    const {numbers}=props;

    const listItems=numbers.map((number)=>{
        <li>{number}</li>
    });

    return (
        <ul>{listItems}</ul>
    );
}

const numbers=[1,2,3,4,5];

ReactDOM.render(
    <NumberList numbers={numbers}>
    document.getElementById('root')
);
```

[리스트에 키 추가하기]
key의 값은 같은 리스트에 있는 엘리먼트 사이에서만 고유한 값이면 된다.

key로 id를 사용하는 경우
```
const todoItems=todos.map((todo)=>
    <li key={todo.id}>
        {todo.text}
    </li>
);
```

key로 index를 사용하는 경우 (아이템들의 고유한 id가 없을 경우만 사용해야 함. 그리고 배열의 순서가 바뀔 수 있으면 문제가 발생함!!)
```
const todoItems=todos.map((todo,index)=>
    <li key={index}>
        {todo.text}
    </li>
);
```

따라서 map() 함수 안에 있는 elements는 꼭 key가 필요하다!!!!

